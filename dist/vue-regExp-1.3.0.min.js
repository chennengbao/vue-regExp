(function() {
    var e = {
        phoneReg: /^(13\d|14[57]|15[012356789]|17[03678]|18\d)\d{8}$/g,
        motionReg: /^(13[456789]|147|15[012789]|18[23478]|178|170)\d$/g,
        unicomReg: /^(13[012]|145|15[56]|176|18[56]|170)\d$/g,
        telecomReg: /^(133|153|17[37]|18[019]|170)\d$/g,
        emailReg: /^([a-zA-Z0-9_\+\-\.])+\@(([a-zA-Z0-9\-])+\.)+([a-zA-Z0-9]{2,4})$/g,
        passwordReg: /^(?=[a-z0-9]*\d)(?=[a-z0-9]*[a-z])[0-z0-9]{6,20}$/gi,
        idCarNoReg: /^[1-9]\d{5}[1-9]\d{3}((0[1-9])|(1[0-2]))((0[1-9])|([1-2]\d)|(3[0-1]))((\d{4})|(\d{3}[Xx]))$/g,
        telePhoneReg: /^((85[23]|0[1-9]\d{1,2})-)?\d{7,8}$/g,
        weixinReg: /^[a-zA-Z][a-zA-Z_0-9-]{5,19}$/g,
        chineseReg: /^[\u2E80-\u9FFF]+$/g,
        urlReg: /^((https|http):\/\/).+$/g
    }, r = {
        phoneError: "手机号码错误",
        emailError: "邮箱格式错误",
        verifyCodeError: "验证码错误",
        passwordError: "密码由6~20位的数字、字母组成",
        idCarNoError: "身份证号码有误",
        telePhoneError: "电话号码有误",
        weixinError: "微信号码有误",
        chineseError: "不是中文",
        urlError: "url地址有误",
        cardNumError: "识别号有误"
    }, o = {
        strTrim: function(e) {
            if (typeof e === "number") {
                e = e.toString();
            }
            return e.trim();
        },
        sumFn: function(e) {
            var r = e.length, o = 0;
            for (var t = 0; t < r; t++) {
                o += Number(e[t]);
            }
            return o;
        },
        phoneByReg: function(t, s) {
            var i = o.strTrim(t), n = {}, c = false, a = r.phoneError, l = i.substring(0, 4);
            if (typeof s === "object") {
                c = s["detail"] ? s["detail"] : false;
                a = s["error"] ? s["error"] : r.phoneError;
            }
            if (e.phoneReg.test(i)) {
                e.phoneReg.lastIndex = 0;
                if (c) {
                    switch (true) {
                      case e.telecomReg.test(l):
                        n["type"] = "电信";
                        e.telecomReg.lastIndex = 0;
                        break;

                      case e.motionReg.test(l):
                        n["type"] = "移动";
                        e.motionReg.lastIndex = 0;
                        break;

                      case e.unicomReg.test(l):
                        n["type"] = "联通";
                        e.unicomReg.lastIndex = 0;
                        break;
                    }
                }
                n["check"] = true;
                n["success"] = "匹配成功";
            } else {
                n["check"] = false;
                n["error"] = a;
            }
            return n;
        },
        emailByReg: function(t, s) {
            var i = o.strTrim(t), n = {}, c = r.emailError;
            if (typeof s == "object") {
                c = s["error"] ? s["error"] : r.emailError;
            }
            if (e.emailReg.test(i)) {
                e.emailReg.lastIndex = 0;
                n["check"] = true;
                n["success"] = "匹配成功";
            } else {
                n["check"] = false;
                n["error"] = c;
            }
            return n;
        },
        verifyCodeByReg: function(e, t) {
            var s = o.strTrim(e), i = {}, n = new RegExp("^\\d{" + t["count"] + "}$", "gi"), c = r.verifyCodeError;
            if (typeof t == "object") {
                c = t["error"] ? t["error"] : r.verifyCodeError;
            }
            if (n.test(s)) {
                n.lastIndex = 0;
                i["check"] = true;
                i["success"] = "匹配成功";
            } else {
                i["check"] = false;
                i["error"] = c;
            }
            return i;
        },
        passwordByReg: function(t, s) {
            var i = o.strTrim(t), n = {}, c = r.passwordError;
            if (typeof s == "object") {
                c = s["error"] ? s["error"] : r.passwordError;
            }
            if (e.passwordReg.test(i)) {
                e.passwordReg.lastIndex = 0;
                n["check"] = true;
                n["success"] = "匹配成功";
            } else {
                n["check"] = false;
                n["error"] = c;
            }
            return n;
        },
        idCarNoByReg: function(t, s) {
            var i = o.strTrim(t), n = {}, c = [ 7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2 ], a = [ 1, 0, 10, 9, 8, 7, 6, 5, 4, 3, 2 ], l = i.split(""), u = 0, f = r.idCarNoError;
            if (typeof s == "object") {
                f = s["error"] ? s["error"] : r.idCarNoError;
            }
            if (e.idCarNoReg.test(i)) {
                e.idCarNoReg.lastIndex = 0;
                for (var g = 0; g < 17; g++) {
                    u += c[g] * l[g];
                }
                u %= 11;
                var d = l[17];
                if (d == "x" || d == "X") {
                    d = 10;
                }
                if (d == a[u]) {
                    n["areaCode"] = i.substring(0, 6);
                    n["birthday"] = i.substring(6, 14);
                    n["sex"] = i.substring(16, 17) == 1 ? "男" : "女";
                    n["check"] = true;
                    n["success"] = "验证成功";
                } else {
                    n["check"] = false;
                    n["error"] = f;
                }
            } else {
                n["check"] = false;
                n["error"] = f;
            }
            return n;
        },
        telePhoneByReg: function(t, s) {
            var i = o.strTrim(t), n = {}, c = r.telePhoneError;
            if (typeof s == "object") {
                c = s["error"] ? s["error"] : r.telePhoneError;
            }
            if (e.telePhoneReg.test(i)) {
                e.telePhoneReg.lastIndex = 0;
                n["check"] = true;
                n["success"] = "匹配成功";
            } else {
                n["check"] = false;
                n["error"] = c;
            }
            return n;
        },
        weixinByReg: function(t, s) {
            var i = o.strTrim(t), n = {}, c = r.weixinError;
            if (typeof s == "object") {
                c = s["error"] ? s["error"] : r.weixinError;
            }
            if (e.weixinReg.test(i)) {
                e.weixinReg.lastIndex = 0;
                n["check"] = true;
                n["success"] = "匹配成功";
            } else {
                n["check"] = false;
                n["error"] = c;
            }
            return n;
        },
        chineseByReg: function(t, s) {
            var i = o.strTrim(t), n = {}, c = r.chineseError;
            if (typeof s == "object") {
                c = s["error"] ? s["error"] : r.chineseError;
            }
            if (e.chineseReg.test(i)) {
                e.chineseReg.lastIndex = 0;
                n["check"] = true;
                n["success"] = "匹配成功";
            } else {
                n["check"] = false;
                n["error"] = c;
            }
            return n;
        },
        urlByReg: function(t, s) {
            var i = o.strTrim(t), n = {}, c = r.urlError;
            if (typeof s == "object") {
                c = s["error"] ? s["error"] : r.urlError;
            }
            if (e.urlReg.test(i)) {
                e.urlReg.lastIndex = 0;
                n["check"] = true;
                n["success"] = "匹配成功";
            } else {
                n["check"] = false;
                n["error"] = c;
            }
            return n;
        },
        luhnValidate: function(e, t) {
            var s, i = r.cardNumError;
            resultObj = {};
            if (typeof e != "string") {
                resultObj["check"] = false;
                resultObj["error"] = "待验证的识别号不是字符串类型";
                return resultObj;
            }
            if (typeof t == "object") {
                i = t["error"] || r.cardNumError;
            }
            s = e.split("");
            len = s.length;
            for (var n = len; n >= 1; n--) {
                if (n % 2 == 0) {
                    s[n - 1] *= 2;
                    s[n - 1] = parseInt(s[n - 1] / 10) + parseInt(s[n - 1] % 10);
                }
            }
            if (o.sumFn(s) % 10 == 0) {
                resultObj["check"] = true;
                resultObj["error"] = "匹配成功";
            } else {
                resultObj["check"] = false;
                resultObj["error"] = i;
            }
            return resultObj;
        }
    };
    var t = {};
    t.install = function(e, r) {
        e.phoneByReg = o.phoneByReg;
        e.emailByReg = o.emailByReg;
        e.verifyCodeByReg = o.verifyCodeByReg;
        e.passwordByReg = o.passwordByReg;
        e.idCarNoByReg = o.idCarNoByReg;
        e.telePhoneByReg = o.telePhoneByReg;
        e.weixinByReg = o.weixinByReg;
        e.chineseByReg = o.chineseByReg;
        e.urlByReg = o.urlByReg;
        e.luhnValidate = o.luhnValidate;
    };
    if (typeof exports == "object") {
        module.exports = t;
    } else if (typeof define == "function" && define.amd) {
        define([], function() {
            return t;
        });
    } else if (window.Vue) {
        window.cnbPlugin = t;
        Vue.use(t);
    }
})();